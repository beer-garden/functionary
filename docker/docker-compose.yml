version: "3.5"

x-environment:
  &environment
  DEBUG: TRUE
  DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY:-supersecret}
  DJANGO_SETTINGS_MODULE: functionary.settings.debug
  LOG_LEVEL: DEBUG
  RABBITMQ_USER: ${RABBITMQ_USER:-bugs}
  RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-wascallywabbit}
  RABBITMQ_HOST: rabbitmq
  RABBITMQ_PORT: 5672
  DB_ENGINE: POSTGRESQL
  DB_HOST: postgresql
  DB_NAME: functionary
  DB_USER: admin
  DB_PASSWORD: password
  DB_PORT: 5432
  FUNCTIONARY_NETWORK: functionary-network # Mutually exclusive with NETWORK_MODE
  FUNCTIONARY_NETWORK_MODE:


services:
  django:
    build:
      context: ../functionary
      dockerfile: ../docker/dev.Dockerfile
      args:
        uid: ${UID:-1000}
    image: functionary_django
    container_name: functionary-django
    command: runserver
    environment:
      <<: *environment
    networks:
      - functionary-network
    ports:
      - 8000:8000
      - 5678:5678
    volumes:
      - ../functionary:/app
    depends_on:
      - rabbitmq
      - database
  listener:
    build:
      context: ../functionary
      dockerfile: ../docker/dev.Dockerfile
      args:
        uid: ${UID:-1000}
    image: functionary_django
    container_name: functionary-listener
    command: run_listener
    environment:
      <<: *environment
    networks:
      - functionary-network
    ports:
      - 5683:5683
    volumes:
      - ../functionary:/app
    depends_on:
      - rabbitmq
  worker:
    build:
      context: ../functionary
      dockerfile: ../docker/dev.Dockerfile
      args:
        uid: ${UID:-1000}
    image: functionary_django
    container_name: functionary-worker
    command: run_worker
    environment:
      <<: *environment
    networks:
      - functionary-network
    ports:
      - 5679:5679
    volumes:
      - ../functionary:/app
    depends_on:
      - rabbitmq
  scheduler:
    build:
      context: ../functionary
      dockerfile: ../docker/dev.Dockerfile
      args:
        uid: ${UID:-1000}
    image: functionary_django
    container_name: functionary-scheduler
    command: run_scheduler
    environment:
      <<: *environment
    networks:
      - functionary-network
    ports:
      - 5684:5684
    volumes:
      - ../functionary:/app
    depends_on:
      - rabbitmq
      - database
  build-worker:
    build:
      context: ../functionary
      dockerfile: ../docker/dev_docker.Dockerfile
    image: functionary_django_docker
    container_name: functionary-build-worker
    command: run_build_worker
    environment:
      <<: *environment
    networks:
      - functionary-network
    ports:
      - 5680:5680
    volumes:
      - ../functionary:/app
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - rabbitmq
  runner:
    build:
      context: ../runner
      dockerfile: ../docker/dev_docker.Dockerfile
      args:
        uid: ${UID:-1000}
    image: functionary_runner
    container_name: functionary-runner
    command: start
    environment:
      <<: *environment
      RABBITMQ_HTTP_PORT: 15672
      RUNNER_DEFAULT_VHOST: public
    networks:
      - functionary-network
    ports:
      - 5681:5681
    volumes:
      - ../runner:/app
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - rabbitmq
  database:
    image: postgres:latest
    container_name: functionary-database
    hostname: postgresql
    environment:
      <<: *environment
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: functionary
    networks:
      - functionary-network
    ports:
      - 5432:5432
    volumes:
      - postgresql-data:/var/lib/postgresql/data
  rabbitmq:
    image: rabbitmq:management
    container_name: functionary-rabbitmq
    hostname: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-bugs}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULTPASS:-wascallywabbit}
    networks:
      - functionary-network
    ports:
      - 5671:5671
      - 5672:5672
      - 15671:15671
      - 15672:15672
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
  registry:
    image: registry:2
    container_name: functionary-registry
    hostname: registry
    networks:
      - functionary-network
    ports:
      - 5000:5000
    volumes:
      - registry-data:/var/lib/registry
  minio:
    image: quay.io/minio/minio:latest
    container_name: functionary-s3
    command: server /data --console-address ":9090"
    hostname: minio
    environment:
      <<: *environment
      MINIO_ROOT_USER: ROOTUSER
      MINIO_ROOT_PASSWORD: CHANGEME123
    networks:
      - functionary-network
    ports:
      - 9000:9000
      - 9090:9090
    volumes:
      - file-data:/data

networks:
  functionary-network:
    driver: bridge
    name: functionary-network

volumes:
  rabbitmq-data:
  registry-data:
  postgresql-data:
  file-data:
